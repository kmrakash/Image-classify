{"ast":null,"code":"var _jsxFileName = \"/home/akash/Image-Classify/src/App.js\";\nimport React, { useReducer, useState, useRef } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport './App.css';\nconst stateMachine = {\n  initial: 'initial',\n  states: {\n    initial: {\n      on: {\n        next: 'loading'\n      }\n    },\n    loading: {\n      on: {\n        next: 'awaitingUpload'\n      }\n    },\n    awaitingUpload: {\n      on: {\n        next: 'ready'\n      }\n    },\n    ready: {\n      on: {\n        next: 'classifying'\n      },\n      showImage: true\n    },\n    classifying: {\n      on: {\n        next: 'complete'\n      }\n    },\n    complete: {\n      on: {\n        next: 'awaitingUpload'\n      },\n      showImage: true,\n      showResults: true\n    }\n  }\n};\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nconst formatList = ({\n  className,\n  probability\n}) => /*#__PURE__*/React.createElement(\"li\", {\n  key: className,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }\n}, `${className} : ${(probability * 100).toFixed(2)}%`);\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setimageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n\n  const next = () => dispatch(\"next\");\n\n  const inputRef = useRef();\n  const imageRef = useRef();\n\n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next();\n  };\n\n  const handleUpload = e => {\n    const {\n      files\n    } = e.target;\n    console.log(files.length);\n\n    if (files.length > 0) {\n      console.log(files[0]);\n      const url = URL.createObjectURL(e.target.files[0]);\n      setimageUrl(url);\n      next();\n    }\n  };\n\n  const Identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const reset = () => {\n    setResults([]);\n    setimageUrl(null);\n    next();\n  };\n\n  const buttonProps = {\n    initial: {\n      text: 'Load Model',\n      action: loadModel\n    },\n    loading: {\n      text: 'loading',\n      action: () => {}\n    },\n    awaitingUpload: {\n      text: 'Upload Picture',\n      action: upload\n    },\n    ready: {\n      text: 'Identify',\n      action: Identify\n    },\n    classifying: {\n      text: 'Identifying',\n      action: () => {}\n    },\n    complete: {\n      text: 'Reset',\n      action: reset\n    }\n  };\n  const {\n    showImage = false,\n    showResults = false\n  } = stateMachine.states[state];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, showImage && /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Upload Preview\",\n    src: imageUrl,\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 22\n    }\n  }), showResults && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, results.map(formatList)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    ref: inputRef,\n    onChange: handleUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buttonProps[state].action || (() => {}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, buttonProps[state].text));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/akash/Image-Classify/src/App.js"],"names":["React","useReducer","useState","useRef","mobilenet","stateMachine","initial","states","on","next","loading","awaitingUpload","ready","showImage","classifying","complete","showResults","reducer","currentState","event","formatList","className","probability","toFixed","App","state","dispatch","model","setModel","imageUrl","setimageUrl","results","setResults","inputRef","imageRef","loadModel","mobilenetModel","load","handleUpload","e","files","target","console","log","length","url","URL","createObjectURL","Identify","classify","current","upload","click","reset","buttonProps","text","action","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AACA,OAAO,WAAP;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAG,SADS;AAEnBC,EAAAA,MAAM,EAAG;AACPD,IAAAA,OAAO,EAAE;AAAEE,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAN,KADF;AAEPC,IAAAA,OAAO,EAAE;AAACF,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAL,KAFF;AAGPE,IAAAA,cAAc,EAAC;AAACH,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAL,KAHR;AAIPG,IAAAA,KAAK,EAAC;AAACJ,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAL;AAA4BI,MAAAA,SAAS,EAAE;AAAvC,KAJC;AAKPC,IAAAA,WAAW,EAAC;AAACN,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP;AAAL,KALL;AAMPM,IAAAA,QAAQ,EAAE;AAACP,MAAAA,EAAE,EAAE;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAL;AAA+BI,MAAAA,SAAS,EAAE,IAA1C;AAAgDG,MAAAA,WAAW,EAAE;AAA7D;AANH;AAFU,CAArB;;AAYA,MAAMC,OAAO,GAAG,CAACC,YAAD,EAAeC,KAAf,KAAyBd,YAAY,CAACE,MAAb,CAAoBW,YAApB,EAAkCV,EAAlC,CAAqCW,KAArC,KAA+Cd,YAAY,CAACC,OAArG;;AAEA,MAAMc,UAAU,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAD,kBACjB;AAAI,EAAA,GAAG,EAAED,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,GAAEA,SAAU,MAAK,CAACC,WAAW,GAAG,GAAf,EAAoBC,OAApB,CAA4B,CAA5B,CAA+B,GADpD,CADF;;AAMA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,UAAU,CAACgB,OAAD,EAAUZ,YAAY,CAACC,OAAvB,CAApC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMO,IAAI,GAAG,MAAMiB,QAAQ,CAAC,MAAD,CAA3B;;AACA,QAAMO,QAAQ,GAAG9B,MAAM,EAAvB;AACA,QAAM+B,QAAQ,GAAG/B,MAAM,EAAvB;;AAEA,QAAMgC,SAAS,GAAG,YAAY;AAC5B1B,IAAAA,IAAI;AACJ,UAAM2B,cAAc,GAAG,MAAMhC,SAAS,CAACiC,IAAV,EAA7B;AACAT,IAAAA,QAAQ,CAACQ,cAAD,CAAR;AACA3B,IAAAA,IAAI;AACL,GALD;;AAOA,QAAM6B,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,MAAlB;;AACA,QAAGJ,KAAK,CAACI,MAAN,GAAe,CAAlB,EAAoB;AAClBF,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAAC,CAAD,CAAjB;AACA,YAAMK,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBR,CAAC,CAACE,MAAF,CAASD,KAAT,CAAe,CAAf,CAApB,CAAZ;AACAV,MAAAA,WAAW,CAACe,GAAD,CAAX;AACApC,MAAAA,IAAI;AACL;AACF,GATD;;AAWA,QAAMuC,QAAQ,GAAG,YAAY;AAE3BvC,IAAAA,IAAI;AACJ,UAAMsB,OAAO,GAAG,MAAMJ,KAAK,CAACsB,QAAN,CAAef,QAAQ,CAACgB,OAAxB,CAAtB;AACAlB,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAtB,IAAAA,IAAI;AACL,GAND;;AAOA,QAAM0C,MAAM,GAAG,MAAMlB,QAAQ,CAACiB,OAAT,CAAiBE,KAAjB,EAArB;;AAEA,QAAMC,KAAK,GAAG,MAAM;AAClBrB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAF,IAAAA,WAAW,CAAC,IAAD,CAAX;AACArB,IAAAA,IAAI;AACL,GAJD;;AAMA,QAAM6C,WAAW,GAAG;AAClBhD,IAAAA,OAAO,EAAG;AAACiD,MAAAA,IAAI,EAAE,YAAP;AAAqBC,MAAAA,MAAM,EAAErB;AAA7B,KADQ;AAElBzB,IAAAA,OAAO,EAAG;AAAC6C,MAAAA,IAAI,EAAE,SAAP;AAAkBC,MAAAA,MAAM,EAAE,MAAM,CAAE;AAAlC,KAFQ;AAGlB7C,IAAAA,cAAc,EAAG;AAAC4C,MAAAA,IAAI,EAAE,gBAAP;AAAyBC,MAAAA,MAAM,EAAEL;AAAjC,KAHC;AAIlBvC,IAAAA,KAAK,EAAG;AAAC2C,MAAAA,IAAI,EAAE,UAAP;AAAmBC,MAAAA,MAAM,EAAER;AAA3B,KAJU;AAKlBlC,IAAAA,WAAW,EAAG;AAACyC,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,MAAM,EAAE,MAAM,CAAE;AAAtC,KALI;AAMlBzC,IAAAA,QAAQ,EAAG;AAACwC,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,MAAM,EAAEH;AAAxB;AANO,GAApB;AASA,QAAM;AAAExC,IAAAA,SAAS,GAAG,KAAd;AAAsBG,IAAAA,WAAW,GAAE;AAAnC,MAA4CX,YAAY,CAACE,MAAb,CAAoBkB,KAApB,CAAlD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIZ,SAAS,iBAAI;AAAK,IAAA,GAAG,EAAC,gBAAT;AAA0B,IAAA,GAAG,EAAEgB,QAA/B;AAAyC,IAAA,GAAG,EAAEK,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjB,EAEGlB,WAAW,iBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCe,OAAO,CAAC0B,GAAR,CAAYrC,UAAZ,CADD,CAHN,eAOE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,MAAM,EAAC,SAA1B;AAAoC,IAAA,GAAG,EAAEa,QAAzC;AAAmD,IAAA,QAAQ,EAAEK,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE;AAAQ,IAAA,OAAO,EAAEgB,WAAW,CAAC7B,KAAD,CAAX,CAAmB+B,MAAnB,KAA8B,MAAI,CAAE,CAApC,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyDF,WAAW,CAAC7B,KAAD,CAAX,CAAmB8B,IAA5E,CARF,CADF;AAYD;;AAED,eAAe/B,GAAf","sourcesContent":["import React, { useReducer, useState, useRef } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport './App.css';\n\nconst stateMachine = {\n  initial : 'initial',\n  states : {\n    initial: { on: {next: 'loading'}},\n    loading: {on: {next: 'awaitingUpload'}},\n    awaitingUpload:{on: {next: 'ready'}},\n    ready:{on: {next: 'classifying'}, showImage: true},\n    classifying:{on: {next: 'complete'}},\n    complete: {on: {next: 'awaitingUpload'}, showImage: true, showResults: true}\n  }\n}\n\nconst reducer = (currentState, event) => stateMachine.states[currentState].on[event] || stateMachine.initial;\n\nconst formatList = ({className, probability}) => (\n  <li key={className}>\n    {`${className} : ${(probability * 100).toFixed(2)}%`}\n  </li>\n)\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, stateMachine.initial);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setimageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n  const next = () => dispatch(\"next\");\n  const inputRef = useRef();\n  const imageRef = useRef();\n  \n  const loadModel = async () => {\n    next();\n    const mobilenetModel = await mobilenet.load();\n    setModel(mobilenetModel);\n    next(); \n  }\n\n  const handleUpload = e => {\n    const { files } = e.target;\n    console.log(files.length);\n    if(files.length > 0){\n      console.log(files[0]);\n      const url = URL.createObjectURL(e.target.files[0]);\n      setimageUrl(url);\n      next();\n    }\n  }\n\n  const Identify = async () => {\n    \n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  }\n  const upload = () => inputRef.current.click(); \n\n  const reset = () => {\n    setResults([]);\n    setimageUrl(null);\n    next();\n  }\n\n  const buttonProps = {\n    initial : {text: 'Load Model', action: loadModel},\n    loading : {text: 'loading', action: () => {}},\n    awaitingUpload : {text: 'Upload Picture', action: upload},\n    ready : {text: 'Identify', action: Identify},\n    classifying : {text: 'Identifying', action: () => {}},\n    complete : {text: 'Reset', action: reset},\n  }\n\n  const { showImage = false , showResults= false} = stateMachine.states[state];\n\n  return (\n    <div className=\"App\">\n      { showImage && <img alt=\"Upload Preview\" src={imageUrl} ref={imageRef}/>}\n      {showResults && \n          <ul>\n          {results.map(formatList)}\n          </ul>\n      }\n      <input type=\"file\" accept=\"image/*\" ref={inputRef} onChange={handleUpload} />\n      <button onClick={buttonProps[state].action || (()=>{})}>{buttonProps[state].text}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}